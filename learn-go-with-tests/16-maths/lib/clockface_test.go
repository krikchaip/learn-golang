package clockface_test

import (
	clockface "16-maths/lib"
	"encoding/xml"
	"strconv"
	"testing"
	"time"
)

func TestSecondHand(t *testing.T) {
	// time -> unit vector
	cases := []struct {
		time  time.Time
		point clockface.Point
	}{
		{clock(0, 0, 0), clockface.Point{0, -1}},
		{clock(0, 0, 30), clockface.Point{0, 1}},
		{clock(0, 0, 45), clockface.Point{-1, 0}},
	}

	for _, c := range cases {
		t.Run(testName(c.time), func(t *testing.T) {
			got := clockface.SecondHand(c.time)
			want := c.point.ShiftLength(clockface.SecondHandLength)

			if !got.RoughlyEqual(want) {
				t.Errorf("Got %v, wanted %v", got, want)
			}
		})
	}
}

func TestClockSVG(t *testing.T) {
	tm := clock(0, 0, 0)

	bytes := []byte(clockface.ClockSVG(tm))
	svg := &Svg{}

	// ?? svg = xml.Parse(bytes)
	xml.Unmarshal(bytes, svg)

	want := clockface.Point{0, -1}.
		ShiftLength(clockface.SecondHandLength)

	for _, line := range svg.Line {
		x, _ := strconv.ParseFloat(line.X2, 64)
		y, _ := strconv.ParseFloat(line.Y2, 64)

		if x == want.X && y == want.Y {
			return
		}
	}

	t.Errorf(
		"Expected to find the second hand with x2 of %.3f and y2 of %.3f, in the SVG output\n%s",
		want.X, want.Y,
		bytes,
	)
}

// generated by https://github.com/miku/zek
type Svg struct {
	XMLName xml.Name `xml:"svg"`
	Text    string   `xml:",chardata"`
	Xmlns   string   `xml:"xmlns,attr"`
	Width   string   `xml:"width,attr"`
	Height  string   `xml:"height,attr"`
	ViewBox string   `xml:"viewBox,attr"`
	Version string   `xml:"version,attr"`
	Circle  struct {
		Text  string `xml:",chardata"`
		Cx    string `xml:"cx,attr"`
		Cy    string `xml:"cy,attr"`
		R     string `xml:"r,attr"`
		Style string `xml:"style,attr"`
	} `xml:"circle"`
	Line []struct {
		Text  string `xml:",chardata"`
		X1    string `xml:"x1,attr"`
		Y1    string `xml:"y1,attr"`
		X2    string `xml:"x2,attr"`
		Y2    string `xml:"y2,attr"`
		Style string `xml:"style,attr"`
	} `xml:"line"`
}

func clock(hour, minute, second int) time.Time {
	return time.Date(1337, time.January, 1, hour, minute, second, 0, time.UTC)
}

func testName(t time.Time) string {
	return t.Format("15:04:05")
}
